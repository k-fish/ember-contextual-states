<section class="hero is-medium is-primary is-bold">
  <div class="hero-body">
    <div class="container has-text-centered">
      <h1 class="title">
        Ember Contextual States
      </h1>
      <h2 class="subtitle">
        Just a simple mix of contextual components and state machines üéâ
      </h2>
    </div>
  </div>
  <div class="hero-foot">
    <nav class="tabs is-boxed">
      <div class="container">
        <ul>
          <li>{{scroll-to href="#about" label="About"}}</li>
          <li>{{scroll-to href="#usage" label="Usage"}}</li>
          <li>{{scroll-to href="#examples" label="Examples"}}</li>
          <li><a href="{{githubUrl}}">Contributing</a></li>
        </ul>
      </div>
    </nav>
  </div>
</section>

<section class="section">
  <div class="container">
    <h1 id="about" class="title">About</h1>
    <hr>
    <div class="content">
      <p class="subtitle is-6"><strong>This is currently an in-development addon, and may not be actively maintained. Use
          with care.</strong>&nbsp;‚ö†Ô∏è
      </p>
      <p>
        Ever felt frustrated writing boilerplate for making things like tabs, multi-steps modals (tours), accordions etc?
        This is a simple addon aimed
        at providing a way to manage states, using contextual components for management. It allows content to be rendered
        with loading and active provided contextually, along with hooks for performing (async) actions between states. For
        anything more complicated, you probably want routes or engines.
      </p>
      <p>
        The provided component is somewhat verbose, but is meant to be used in composition. See the {{scroll-to
        href="#examples" label="examples"}} section for
        ways to simplify the api with composition.
      </p>
    </div>
  </div>
</section>

<section class="section">
  <div class="container">
    <h1 id="usage" class="title">Usage</h1>
    <hr>
    <div class="content">
      <p>
        You can make a new set of states by using the <code>\{{contextual-states}}</code> component. You may also want to
        specify an <code>initialState</code>, if you don't want the default template order.
      </p>
      {{code-snippet name="usage-basic.hbs"}}
      <p>
        As seen above, a state will yield a <code>content</code> block, which is where content is rendered if the state
        is active. If you need to customize behaviour further, the components yield state information as well.
      </p>
      {{code-snippet name="usage-advanced.hbs"}}
      <br>
    </div>
  </div>
</section>

<section class="section">
  <div class="container">
    <h1 id="examples" class="title">Examples</h1>
    <div class="subtitle">Made with Bulma CSS ‚ù§Ô∏è </div>
    <hr>
    <h3 class="title is-4 is-spaced">Tabs</h3>
    <div class="content">
      <p>
        You can compose to simplify a tabs component.
      </p>
      {{code-snippet name="example-tabs-component.hbs"}}
      <p>
        Then with the simplified component you can now use the concept of tabs anywhere.
      </p>
    </div>
    <div class="columns">
      <div class="column">
        <div class="content">
          {{code-snippet name="example-tabs.hbs"}}
        </div>
      </div>
      <div class="column">
        <div class="code-example padded">
        {{partial "snippets/example-tabs"}}
        </div>
      </div>
    </div>

    <h3 class="title is-4 is-spaced">Steps</h3>
    <div class="content">
      <p>
        You can make a wizard-like experience by composing with steps.
      </p>
      {{code-snippet name="example-steps-component.hbs"}}
      <p>
        Here you can provide a sane default for a button and expose it as a yielded component.
      </p>
      {{code-snippet name="example-steps-goto-button.hbs"}}
    </div>
    <div class="columns">
      <div class="column">
        <div class="content">
          {{code-snippet name="example-steps.hbs"}}
        </div>
      </div>
      <div class="column">
        <div class="code-example padded has-text-centered flex-center flex-column">
        {{partial "snippets/example-steps"}}
        </div>
      </div>
    </div>

    <h3 class="title is-4 is-spaced">Accordion</h3>
    <div class="content">
      <p>
        You can also make accordions or manage accordion states.
      </p>
      {{code-snippet name="example-accordion-component.hbs"}}
      <p>
        Creating a new component allows the component to catch mouseEnter events to set the state.
      </p>
      {{code-snippet name="example-accordion-state.hbs"}}
    </div>
    <div class="columns">
      <div class="column">
        <div class="content">
          {{code-snippet name="example-accordion.hbs"}}
        </div>
      </div>
      <div class="column">
        <div class="code-example padded has-text-centered flex-center flex-column">
        {{partial "snippets/example-accordion"}}
        </div>
      </div>
    </div>
  </div>
</section>

<a href="{{githubUrl}}" class="github-corner" aria-label="View source on Github"><svg width="80" height="80"
    viewBox="0 0 250 250" style="fill:#E04E39; color:#fff; position: fixed; top: 0; border: 0; right: 0;"
    aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0
    C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9
    125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px
    106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2
    139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6
    171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6
    C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5
    C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9
    141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover
.octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes
octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media
(max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms
    ease-in-out}}</style>
